"""
given a file generated by run_analyse.py or
combine_analysis.py as the first argument

draw pipeline run resistance metadata stacked bar graph
or combined resistance metadata stacked bar graph

uses matplotlib/seaborn
"""

import json
import collections
import sys

import seaborn
import numpy as np
import matplotlib.pyplot as plt

seaborn.set()

def main():
    with open(sys.argv[1]) as f:
        d = json.loads(f.read())

    Rs = collections.defaultdict(int)
    Ss = collections.defaultdict(int)
    Us = collections.defaultdict(int)
    drug_names = list()

    for drug, preds in d['drug_predictions'].items():
        drug_name = drug[-3:]
        drug_names.append(drug_name)
        Rs[drug_name] = 0
        Ss[drug_name] = 0
        Us[drug_name] = 0
        for pred in preds:
            if pred == 'R':
                Rs[drug_name] += 1
            if pred == 'S':
                Ss[drug_name] += 1
            if pred == 'U':
                Us[drug_name] += 1

    print(drug_names)
    for drug_name in drug_names:
        print(drug_name, Rs[drug_name], Us[drug_name], Ss[drug_name])

    Rs = np.array(list(Rs.values()))
    Ss = np.array(list(Ss.values()))
    Us = np.array(list(Us.values()))

    print(Rs, Ss, Us)

    p1 = plt.bar(drug_names, Rs, color='r')
    p2 = plt.bar(drug_names, Ss, bottom=Rs, color='g')
    p3 = plt.bar(drug_names, Us, bottom=Rs+Ss, color='b')

    plt.title('Drug profile')
    plt.legend((p1[0], p2[0], p3[0]), ('Resistant', 'Sensitive', 'Unknown'))
    plt.xlabel("Drug")
    plt.ylabel("Count")
    plt.show()

if __name__ == "__main__":
    main()
